---
title: "Science With Data"
subtitle: "Intro to programming for [Quantitative Biology](https://www.unimi.it/en/education/quantitative-biology)."
author: "Otho Mantegazza"
format: 
  html:
    toc: true
    number-sections: true
---

# Welcome

During your master you will approach biology from a quantitative point of view.

Some aspects of biological sciences has been quantitative since their start. Genetics for example is been quantitative since the beginning; when [Gregor Mendel](https://en.wikipedia.org/wiki/Mendelian_inheritance) discovered the fundamental laws of inheritance, combining experimental work with statistiscal testing.

So, chances are that you are not completely new to the quantitative approach. For those who start from zero instead, don't worry, it's fun.

# Two Changes in Mindset

Switching to a quantitative mindset requires you to take two steps at the same time. One step is learning to deal with **numbers and data**, the other is learning **computer programming** in order to automate your work on data with programming languages such as [Python](https://www.python.org/) or [R](https://www.r-project.org/) (or Julia, or Javascript). While in theory, one can take the first step without the second one; at the present day it is much more practical to learn about data and programming at the same time.

When you work on data, there are so many steps that you can automate using computer programming, that without it, you would hardly achieve anything useful within reasonable time.

# Open Source, open Access

Most of computational tools for quantitative disciplines, such as R and Python, have been developed with an [open source apporach](https://en.wikipedia.org/wiki/Open_source).

This means that the software that you'll use is free, and that [you are free to](https://bookdown.org/rdpeng/rprogdatascience/history-and-overview-of-r.html#free-software):

- Run the programs.
- Study how the programs work.
- Redistribute copies of the program.
- Modify and improve the program and release it again to the public.

For example, you can access, copy, and propose modification to:

- The [source code of scikit-learn](https://github.com/scikit-learn/scikit-learn), the [main python package for machine learning](https://scikit-learn.org/stable/).
- The [source code for dplyr](https://github.com/tidyverse/dplyr/), the main [R package for manipulating data](https://dplyr.tidyverse.org/).

# Install R and Python

In this master you will focus on learning the programming language Python. Although if later you are going to work in a quantitative and data intensive environment, chances are that you are going to use also R. 

The ["R or Python"](https://www.ibm.com/cloud/blog/python-vs-r) dilemma is a long standing one in data science, those two programming languages are mostly interchangeable, and are both used heavily in data intensive environments.

The best choice is to learn and become proficient in one at least one of the two. When you know one, the other comes easy; like learning spanish when you already speak italian.

## R

The easiest way to install R, is to do it locally.

1. Download and install R from [CRAN](https://cran.r-project.org/).
2. Downlad and install the [Rstudio IDE](https://www.rstudio.com/).

## Python

Python can also be [installed locally](https://jakevdp.github.io/WhirlwindTourOfPython/00-introduction.html#Installation-and-Practical-Considerations).

But I personally prefer to run it in an isolated Docker container, so that I can try multiple version without dealing with conflicts.

So, to run python you have many options:

### Run python remotely on Google Colab

The easiest way to try python, is to run it remotely on Google's server, through [Google Colab](https://colab.research.google.com/).

Just open a Colab Notebook, and run some code.

### Locally

You can install python locally downloading it from [it's main website](https://www.python.org/).

If you use **Linux** or **MacOs**, python is already installed on your computer. Open a terminal and type `python` or `python3` to open it.

### In a Docker Container

I personally use this option. It requires you to install both the IDE [Visual Studio Code](https://code.visualstudio.com/) and the virtualization platform [Docker](https://www.docker.com/).

In this way you will run python in a container isolated from your main operating system through Docker and you will connect to it using visual studio code.

This setup is done through a [Dev Container](https://code.visualstudio.com/docs/remote/containers) It's easier than it sounds, find [an example in this page with video](https://code.visualstudio.com/learn/develop-cloud/containers). 

To try this setup:

1. Install [Docker](https://www.docker.com/).
2. Install [Visual Studio Code](https://code.visualstudio.com/).
3. Install the [Remote Container](https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.remote-containers) extension to Visual Studio Code.
4. Download this [Github Repo](https://github.com/othomantegazza/python-sci-simple-devcon) and open it with Visual Studio Code.

# Let's start programming

Break the ice and write some code.

1. Open a [script in Rstudio](https://r4ds.had.co.nz/introduction.html#rstudio) and copy [this code in it](https://gist.github.com/othomantegazza/03d50b0a9a60d42ef73ef7019f84c958). Run it in the R console to get some nice data visualization out of it.

2. Some python code is already in the [Github repository](https://github.com/othomantegazza/python-sci-simple-devcon) that you have downloaded previously. Open it in Visual Studio Code and find the [hello.ipynb](https://github.com/othomantegazza/python-sci-simple-devcon/blob/main/hello.ipynb) file, run the code that's stored in it.

In the first example we run code from a script into the R console, in the second example we run code from a [notebook](https://en.wikipedia.org/wiki/Notebook_interface).


# Text Files, Scripts, Data



